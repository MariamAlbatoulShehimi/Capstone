// <auto-generated />
using System;
using Capstone.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Capstone.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241219195851_m4")]
    partial class m4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Capstone.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Shelter Assistance"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Food Support"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "Essential Supplies"
                        });
                });

            modelBuilder.Entity("Capstone.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Condition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedDate = new DateTime(2024, 12, 19, 21, 58, 50, 815, DateTimeKind.Local).AddTicks(3673),
                            CategoryId = 1,
                            Condition = "New",
                            Description = "Warm and soft blanket for cold weather.",
                            ImageUrl = " ",
                            ListPrice = 0.0,
                            Location = "Beirut",
                            Name = "Blanket",
                            QuantityAvailable = 50
                        },
                        new
                        {
                            Id = 2,
                            AddedDate = new DateTime(2024, 1, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 2,
                            Condition = "New",
                            Description = "Pack of canned food for long shelf life.",
                            ImageUrl = " ",
                            ListPrice = 0.0,
                            Location = "Tripoli",
                            Name = "Canned Food Package",
                            QuantityAvailable = 100
                        },
                        new
                        {
                            Id = 3,
                            AddedDate = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 3,
                            Condition = "New",
                            Description = "Comfortable pillow for better sleep.",
                            ImageUrl = " ",
                            ListPrice = 10.75,
                            Location = "Zahle",
                            Name = "Pillow",
                            QuantityAvailable = 30
                        },
                        new
                        {
                            Id = 4,
                            AddedDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 2,
                            Condition = "Used",
                            Description = "Lightweight sleeping bag suitable for outdoor use.",
                            ImageUrl = " ",
                            ListPrice = 8.9900000000000002,
                            Location = "Bekaa Valley",
                            Name = "Sleeping Bag",
                            QuantityAvailable = 20
                        },
                        new
                        {
                            Id = 5,
                            AddedDate = new DateTime(2024, 1, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 1,
                            Condition = "New",
                            Description = "Essential hygiene products for personal care.",
                            ImageUrl = " ",
                            ListPrice = 0.0,
                            Location = "Sidon",
                            Name = "Hygiene Kit",
                            QuantityAvailable = 50
                        },
                        new
                        {
                            Id = 6,
                            AddedDate = new DateTime(2024, 1, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 2,
                            Condition = "Good",
                            Description = "Warm jacket for cold seasons.",
                            ImageUrl = " ",
                            ListPrice = 15.5,
                            Location = "Baalbek",
                            Name = "Winter Jacket",
                            QuantityAvailable = 40
                        });
                });

            modelBuilder.Entity("Capstone.Models.Product", b =>
                {
                    b.HasOne("Capstone.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
